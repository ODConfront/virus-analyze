# av-hips

hips - 基于主机的入侵防御

1.引言
1.1脚本拦截和SMTP蠕虫拦截
脚本蠕虫(VBS/LoveLetter@mm,W32/Sobig.F@mm) - 脚本拦截技术
1.2需要拦截的新型攻击：CodeRed/Slammer

2.缓冲区溢出攻击的策略
Morris,Linux/Slapper,BSD/Scalper,Solaris/Sadmind - shellcode类型蠕虫
2.1代码复查
2.1.1安全更新
2.1.2编译器级的解决方案
2.1.2.1StackGuard
StackGuard是给gcc的function_prologue和function_epilogue的一个简单补丁
2.1.2.2ProPolice
2.1.2.3MicrosoftVisualStudio.Net2003:7.0版本和7.1版本
/GS编译选项 - 缓冲区安全检查
int Bogus(char *mystring)
{
  char buf[8];
  strcpy(bud,mystring);
  return 0;
}
void main(void)
{
  Bogus("Here is a typical stack overflow!");
}
保护5个字节或更长的数组
2.3操作系统级的解决方案和运行时扩展
2.4子系统扩展-Libsafe
2.5内核模式扩展
2.6程序监管 - Dynamo RIO
不执行实际代码而执行内存中的拷贝片段

3.蠕虫拦截技术
3.1注入代码检测
3.1.1通过代码注入检测来拦截shellcode
3.2发送拦截：自发送型代码的拦截实例
3.2.1拦截W32/Slammer蠕虫
3.2.2拦截W32/CodeRed蠕虫
3.3异常处理程序验证
KiUserExceptionDispatcher()
3.3.1错误的异常处理程序顺序
3.3.2异常处理程序位于堆或堆栈上
3.3.3异常帧指针无效
3.4减轻Return-to-LIBC攻击的其他技术
3.4.1进程地址空间的随机化 - ALSR
3.4.2检测对库函数的直接调用
3.5GOT和IAT页面属性
3.6高连接数和大量的连接错误

4.未来可能出现的蠕虫攻击
4.1反制蠕虫数量的可能增长
4.2雷达探测不到的“慢”蠕虫
4.3多态和变形蠕虫
W32/Simile.D,Linux/Simile.D,W95/Zmist
4.4大规模的破坏
W95/CIH，W32/Witty
4.5自动化的漏洞利用代码发现-从环境中学习
W32/Funlove,W64/Rugrat.3344









